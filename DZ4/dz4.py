import random

"""
Задача 22:
Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
Пользователь вводит 2 числа. n — кол-во элементов первого множества.
m — кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.
"""


def random_array():
    # Генерация случайной длины списка
    length = random.randint(1, 10)

    # Создание пустого списка
    number_list = []

    # Заполнение списка случайными целыми числами
    for _ in range(length):
        number = random.randint(1, 10)
        number_list.append(number)
    return number_list


def find_common_numbers(set1, set2):
    # Создаем множества из переданных наборов чисел
    set1 = set(set1)
    set2 = set(set2)

    # Используем оператор пересечения множеств, чтобы найти общие элементы
    common_numbers = set1 & set2

    # Сортируем полученные общие числа в порядке возрастания
    sorted_numbers = sorted(common_numbers)
    return sorted_numbers


# Решение задачи
set1 = random_array()
set2 = random_array()

print(set1)
print(set2)
print(find_common_numbers(set1, set2))

"""
Задача 24: 
В фермерском хозяйстве в Карелии выращивают чернику. 
Она растёт на круглой грядке, причём кусты высажены только по окружности. 
Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло ai ягод.
В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, 
находясь перед некоторым кустом заданной во входном файле грядки.
"""

def sum_circular(lst):
    result = []
    length = len(lst)
    for i in range(length):
        current_sum = lst[i] + lst[(i+1) % length] + lst[(i+2) % length]
        result.append(current_sum)
    return max(result)

# решение задачи
my_list = random_array()
result_list = sum_circular(my_list)
print(result_list)